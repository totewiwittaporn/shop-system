generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//
// ----------------------------
// üîπ Users & Branch
// ----------------------------
model User {
  id           Int     @id @default(autoincrement())
  name         String?
  email        String  @unique
  passwordHash String
  role         Role    @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤)
  branchId Int?
  branch   Branch? @relation(fields: [branchId], references: [id])

  // ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏Ç‡∏≤)
  consignmentShopId Int?
  consignmentShop   ConsignmentShop? @relation(fields: [consignmentShopId], references: [id])

  orders             Order[]
  sales              Sale[]
  ConsignmentInvoice ConsignmentInvoice[]
}

model Branch {
  id        Int        @id @default(autoincrement())
  name      String
  type      BranchType @default(BRANCH)
  location  String?
  taxId     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  users             User[]
  stocks            Stock[]
  orders            Order[]
  purchases         Purchase[]
  products          BranchProduct[]
  invoices          Invoice[]
  invoiceTemplates  InvoiceTemplate[]
  deliveryTemplates DeliveryTemplate[]
  sales             Sale[]             @relation("SaleBranch")
  saleItems         SaleItem[]
  StockIssueDraft   StockIssueDraft[]
  DeliveryDoc       DeliveryDoc[]
}

enum BranchType {
  HEAD
  BRANCH
}

//
// ----------------------------
// üîπ Supplier
// ----------------------------
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String?
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchases Purchase[]
}

//
// ----------------------------
// üîπ Product & Category (‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤)
// ----------------------------
model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  categoryId  Int
  barcode     String? @unique

  category  Category @relation(fields: [categoryId], references: [id])
  stocks    Stock[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchProducts      BranchProduct[]
  orderItems          OrderItem[]
  purchaseItems       PurchaseItem[]
  consignedProducts   ConsignedProduct[]
  saleItems           SaleItem[]
  stockIssueDraftLine StockIssueDraftLine[]
  shopProductMappings ShopProductMap[]
  ConsignmentStock    ConsignmentStock[]
}

//
// ----------------------------
// üîπ Product per Branch (‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤)
// ----------------------------
model BranchProduct {
  id        Int      @id @default(autoincrement())
  branchId  Int
  productId Int
  sku       String?
  name      String?
  price     Float
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch     Branch      @relation(fields: [branchId], references: [id])
  product    Product     @relation(fields: [productId], references: [id])
  orderItems OrderItem[]
  stocks     Stock[]
}

//
// ----------------------------
// üîπ Stock (‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤/‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö)
// ----------------------------
model Stock {
  id              Int           @id @default(autoincrement())
  branchProductId Int
  productId       Int
  quantity        Int           @default(0)
  StockLocation   StockLocation @default(MAIN)
  updatedAt       DateTime      @updatedAt

  branchId      Int
  branch        Branch        @relation(fields: [branchId], references: [id])
  branchProduct BranchProduct @relation(fields: [branchProductId], references: [id])
  Product       Product       @relation(fields: [productId], references: [id])

  @@unique([branchProductId, StockLocation])
}

enum StockLocation {
  MAIN
  BRANCH
}

//
// ----------------------------
// üîπ Draft: ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏£‡∏≤ ‚Üí ‡∏£‡πâ‡∏≤‡∏ô‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢
// ----------------------------
model StockIssueDraft {
  id           Int      @id @default(autoincrement())
  fromBranchId Int
  toShopId     Int
  status       String   @default("DRAFT") // DRAFT|CONFIRMED
  createdBy    Int
  createdAt    DateTime @default(now())

  fromBranch Branch          @relation(fields: [fromBranchId], references: [id])
  toShop     ConsignmentShop @relation(fields: [toShopId], references: [id])

  lines StockIssueDraftLine[]
}

model StockIssueDraftLine {
  id        Int @id @default(autoincrement())
  draftId   Int
  productId Int
  qty       Int

  draft   StockIssueDraft @relation(fields: [draftId], references: [id])
  product Product         @relation(fields: [productId], references: [id])
}

//
// ----------------------------
// üîπ Purchase (‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤)
// ----------------------------
model Purchase {
  id         Int             @id @default(autoincrement())
  supplierId Int
  branchId   Int

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ date ‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡πâ‡∏î backend ‡πÉ‡∏ä‡πâ)
  docDate    DateTime        @default(now())

  status     PurchaseStatus  @default(DRAFT)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  items      PurchaseItem[]

  supplier   Supplier        @relation(fields: [supplierId], references: [id])
  branch     Branch          @relation(fields: [branchId], references: [id])

  @@index([branchId, docDate], name: "idx_purchase_branch_docdate")
  @@index([supplierId, docDate], name: "idx_purchase_supplier_docdate")
}

model PurchaseItem {
  id            Int           @id @default(autoincrement())
  purchaseId    Int
  productId     Int
  orderedQty    Int
  receivedQty   Int
  usableQty     Int
  defectQty     Int           @default(0)
  unitCost      Float
  totalCost     Float
  StockLocation StockLocation @default(MAIN)

  purchase Purchase     @relation(fields: [purchaseId], references: [id])
  product  Product      @relation(fields: [productId], references: [id])
  defects  DefectItem[]
}

enum PurchaseStatus {
  DRAFT
  PENDING
  RECEIVED
  CANCELED
}

model DefectItem {
  id             Int      @id @default(autoincrement())
  purchaseItemId Int
  reason         String?
  quantity       Int
  createdAt      DateTime @default(now())

  purchaseItem PurchaseItem @relation(fields: [purchaseItemId], references: [id])
}

//
// ----------------------------
// üîπ Sale (Order / POS ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Branch ‡πÅ‡∏•‡∏∞ Consignment)
// ----------------------------
enum SaleChannel {
  BRANCH_POS
  CONSIGNMENT_POS
}

model Sale {
  id        Int         @id @default(autoincrement())
  userId    Int
  branchId  Int
  shopId    Int? // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Consignment POS ‡πÉ‡∏™‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ, ‡∏ñ‡πâ‡∏≤ Branch POS = null
  channel   SaleChannel @default(BRANCH_POS)
  total     Float
  discount  Float       @default(0)
  vat       Float       @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    SaleStatus  @default(ACTIVE)

  user   User             @relation(fields: [userId], references: [id])
  branch Branch           @relation("SaleBranch", fields: [branchId], references: [id])
  shop   ConsignmentShop? @relation(fields: [shopId], references: [id])

  items SaleItem[]

  @@index([shopId])
  @@index([channel])
}

model SaleItem {
  id        Int   @id @default(autoincrement())
  saleId    Int
  productId Int
  branchId  Int
  quantity  Int
  price     Float

  sale                    Sale                     @relation(fields: [saleId], references: [id])
  product                 Product                  @relation(fields: [productId], references: [id])
  branch                  Branch                   @relation(fields: [branchId], references: [id])
  consignedProductId      Int?
  consignedProduct        ConsignedProduct?        @relation(fields: [consignedProductId], references: [id])
  consignmentInvoiceLines ConsignmentInvoiceLine[]
}

enum SaleStatus {
  ACTIVE
  CANCELED
}

//
// ----------------------------
// üîπ Invoice (Flexible)
// ----------------------------
model Invoice {
  id        Int      @id @default(autoincrement())
  branchId  Int
  orderId   Int?     @unique
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch Branch        @relation(fields: [branchId], references: [id])
  order  Order?        @relation(fields: [orderId], references: [id])
  lines  InvoiceLine[]
}

model InvoiceLine {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  description String?
  sku         String?
  productName String?
  category    String?
  quantity    Int?
  unitPrice   Float?
  amount      Float?

  createdAt DateTime @default(now())
}

model InvoiceTemplate {
  id        Int      @id @default(autoincrement())
  branchId  Int
  name      String
  config    Json
  createdAt DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])
}

//
// ----------------------------
// üîπ Order (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°/‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå)
// ----------------------------
model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  branchId  Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  branch  Branch      @relation(fields: [branchId], references: [id])
  items   OrderItem[]
  invoice Invoice?
}

model OrderItem {
  id              Int   @id @default(autoincrement())
  orderId         Int
  productId       Int
  branchProductId Int?
  quantity        Int
  unitPrice       Float
  amount          Float

  order         Order          @relation(fields: [orderId], references: [id])
  product       Product        @relation(fields: [productId], references: [id])
  branchProduct BranchProduct? @relation(fields: [branchProductId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

//
// ----------------------------
// üîπ DeliveryDoc (‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á ‚Üí ‡∏£‡πâ‡∏≤‡∏ô‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢)
// ----------------------------
model DeliveryDoc {
  id           Int            @id @default(autoincrement())
  shopId       Int
  fromBranchId Int?
  templateId   Int?
  createdAt    DateTime       @default(now())
  status       DeliveryStatus @default(PENDING)

  shop       ConsignmentShop   @relation(fields: [shopId], references: [id])
  fromBranch Branch?           @relation(fields: [fromBranchId], references: [id])
  template   DeliveryTemplate? @relation(fields: [templateId], references: [id])
  lines      DeliveryLine[]
}

model DeliveryLine {
  id         Int         @id @default(autoincrement())
  deliveryId Int
  delivery   DeliveryDoc @relation(fields: [deliveryId], references: [id])

  // snapshot / ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  productId   Int?
  productName String?
  sku         String?
  quantity    Int
  unitPrice   Float?
  amount      Float?

  // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ù‡∏±‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (snapshot)
  partnerCategoryCode String?
  partnerCategoryName String?

  deliveryStockType DeliveryStockType @default(NORMAL)
}

enum DeliveryStockType {
  NORMAL
  CONSIGNMENT
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  RECEIVED
  CANCELED
}

//
// ----------------------------
// üîπ Delivery Template (‡∏´‡∏±‡∏ß/‡∏ó‡πâ‡∏≤‡∏¢/‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô)
// ----------------------------
model DeliveryTemplate {
  id                Int      @id @default(autoincrement())
  scope             String   @default("GLOBAL") // GLOBAL | BRANCH_SHARED | CONSIGNMENT
  branchId          Int?
  consignmentShopId Int?
  name              String
  config            Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  branch          Branch?          @relation(fields: [branchId], references: [id])
  consignmentShop ConsignmentShop? @relation(fields: [consignmentShopId], references: [id])

  docs DeliveryDoc[]

  @@unique([scope, name])
  @@index([scope])
  @@index([branchId])
  @@index([consignmentShopId])
}

//
// ----------------------------
// üîπ ‡∏£‡πâ‡∏≤‡∏ô‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏Ç‡∏≤‡∏¢‡πà‡∏≠‡∏¢)
// ----------------------------
model ConsignmentShop {
  id        Int                 @id @default(autoincrement())
  name      String
  taxId     String?
  contact   String?
  phone     String?
  email     String?
  address   String?
  type      ConsignmentShopType @default(BRANCH)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  users             User[]
  products          ConsignedProduct[]
  invoices          ConsignmentInvoice[]
  billTemplates     ConsignmentBillTemplate[]
  templates         DeliveryTemplate[]
  categories        ShopCategory[]
  productMaps       ShopProductMap[]
  deliveries        DeliveryDoc[]
  StockIssueDraft   StockIssueDraft[]
  Sale              Sale[]
  consignmentStocks ConsignmentStock[] // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö ConsignmentStock
}

enum ConsignmentShopType {
  HEAD
  BRANCH
}

//
// ----------------------------
// üîπ ConsignedProduct (‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ "‡∏£‡πâ‡∏≤‡∏ô")
// ----------------------------
model ConsignedProduct {
  id        Int     @id @default(autoincrement())
  productId Int
  shopId    Int
  price     Float
  active    Boolean @default(true)

  shop      ConsignmentShop @relation(fields: [shopId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  saleItems SaleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shopId, productId])
  @@index([shopId])
  @@index([productId])
}

/// ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢ (‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤)
model ConsignmentStock {
  id        Int      @id @default(autoincrement())
  shopId    Int
  productId Int
  quantity  Int      @default(0)
  updatedAt DateTime @updatedAt

  shop    ConsignmentShop @relation(fields: [shopId], references: [id])
  product Product         @relation(fields: [productId], references: [id])

  @@unique([shopId, productId]) // 1 ‡∏£‡πâ‡∏≤‡∏ô x 1 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ = 1 ‡πÅ‡∏ñ‡∏ß
  @@index([shopId])
  @@index([productId])
}

//
// ----------------------------
// üîπ Consignment Invoice (‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•) ‚Äî ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™ Delivery ‡∏Å‡πà‡∏≠‡∏ô)
// ----------------------------
model ConsignmentInvoice {
  id         Int      @id @default(autoincrement())
  shopId     Int
  templateId Int?
  periodFrom DateTime
  periodTo   DateTime

  // ‡∏ß‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô)
  issueDate      DateTime
  isBackdated    Boolean  @default(false)
  backdateReason String?
  docNo          String?  @unique
  notes          String?
  issuedBy       Int?
  issuedByUser   User?    @relation(fields: [issuedBy], references: [id])

  total     Float
  status    ConsignmentInvoiceStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  shop     ConsignmentShop          @relation(fields: [shopId], references: [id])
  template ConsignmentBillTemplate? @relation(fields: [templateId], references: [id])
  lines    ConsignmentInvoiceLine[]
}

model ConsignmentInvoiceLine {
  id          Int    @id @default(autoincrement())
  invoiceId   Int
  saleItemId  Int
  productName String
  quantity    Int
  price       Float
  amount      Float

  invoice  ConsignmentInvoice @relation(fields: [invoiceId], references: [id])
  saleItem SaleItem           @relation(fields: [saleItemId], references: [id])
}

enum ConsignmentInvoiceStatus {
  PENDING
  PAID
}

model ConsignmentBillTemplate {
  id        Int      @id @default(autoincrement())
  shopId    Int
  name      String
  config    Json // ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏´‡∏±‡∏ß‡∏ö‡∏¥‡∏•/‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏¥‡∏• ‡∏Ø‡∏•‡∏Ø
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop     ConsignmentShop      @relation(fields: [shopId], references: [id])
  invoices ConsignmentInvoice[]

  @@unique([shopId, name])
  @@index([shopId])
}

//
// ----------------------------
// üîπ Shop-side: Category & Product Mapping (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‚Äú‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‚Äù ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô)
// ----------------------------
model ShopCategory {
  id        Int      @id @default(autoincrement())
  shopId    Int
  code      String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop        ConsignmentShop  @relation(fields: [shopId], references: [id])
  productMaps ShopProductMap[]

  @@unique([shopId, code])
  @@index([shopId])
}

model ShopProductMap {
  id             Int     @id @default(autoincrement())
  shopId         Int
  productId      Int
  shopCategoryId Int?
  shopSku        String?
  shopName       String?
  priceOverride  Float?

  shop         ConsignmentShop @relation(fields: [shopId], references: [id])
  product      Product         @relation(fields: [productId], references: [id])
  shopCategory ShopCategory?   @relation(fields: [shopCategoryId], references: [id])

  @@unique([shopId, productId])
  @@index([shopId, shopCategoryId])
}

//
// ----------------------------
// üîπ ENUMS
// ----------------------------
enum Role {
  admin
  seller
  staff
  user
}
