generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum StockLocation {
  MAIN
  CONSIGN
}

enum PurchaseStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  RECEIVED
  CANCELED
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // สัมพันธ์กับตารางอื่น ๆ
  products           BranchProduct[]
  stocks             Stock[]
  purchases          Purchase[]
  branchDeliveries   BranchDeliveryDoc[]  @relation("BranchFromBranch") // สาขาส่งออก
  receivedDeliveries BranchDeliveryDoc[]  @relation("BranchToBranch") // สาขารับเข้า
  consignDeliveries  ConsignDeliveryDoc[] @relation("ConsignFromBranch") // ส่งของให้ร้านฝากขาย
  User               User[]
}

model ConsignmentShop {
  id          Int      @id @default(autoincrement())
  name        String
  displayName String?
  address     String?
  phone       String?
  taxId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  consignDeliveries ConsignDeliveryDoc[] @relation("ConsignToShop")
  User              User[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  code      String?  @unique
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchProducts       BranchProduct[]
  purchaseLines        PurchaseLine[]
  stocks               Stock[]
  branchDeliveryLines  BranchDeliveryLine[]
  consignDeliveryLines ConsignDeliveryLine[]
}

model BranchProduct {
  id        Int    @id @default(autoincrement())
  branchId  Int
  productId Int
  price     Float?
  quantity  Int    @default(0)

  branch  Branch  @relation(fields: [branchId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Stock {
  id            Int           @id @default(autoincrement())
  branchId      Int
  productId     Int
  quantity      Int           @default(0)
  StockLocation StockLocation @default(MAIN)
  updatedAt     DateTime      @updatedAt

  branch  Branch  @relation(fields: [branchId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Purchase {
  id         Int            @id @default(autoincrement())
  supplierId Int
  branchId   Int?
  status     PurchaseStatus @default(PENDING)
  docDate    DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  branch Branch?        @relation(fields: [branchId], references: [id])
  lines  PurchaseLine[]
}

model PurchaseLine {
  id            Int           @id @default(autoincrement())
  purchaseId    Int
  productId     Int
  orderedQty    Int
  usableQty     Int
  defectQty     Int
  unitCost      Float
  totalCost     Float
  StockLocation StockLocation @default(MAIN)

  purchase Purchase @relation(fields: [purchaseId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

/**
 * ===========================================================
 * DELIVERY: BRANCH TO BRANCH
 * ===========================================================
 */
model BranchDeliveryDoc {
  id           Int            @id @default(autoincrement())
  docNumber    String         @unique
  fromBranchId Int
  toBranchId   Int
  status       DeliveryStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  fromBranch Branch               @relation("BranchFromBranch", fields: [fromBranchId], references: [id])
  toBranch   Branch               @relation("BranchToBranch", fields: [toBranchId], references: [id])
  lines      BranchDeliveryLine[]
}

model BranchDeliveryLine {
  id         Int    @id @default(autoincrement())
  docId      Int
  productId  Int
  quantity   Int
  unitPrice  Float?
  totalPrice Float?

  doc     BranchDeliveryDoc @relation(fields: [docId], references: [id])
  product Product           @relation(fields: [productId], references: [id])
}

/**
 * ===========================================================
 * DELIVERY: BRANCH TO CONSIGNMENT SHOP
 * ===========================================================
 */
model ConsignDeliveryDoc {
  id           Int            @id @default(autoincrement())
  docNumber    String         @unique
  fromBranchId Int
  shopId       Int
  status       DeliveryStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  fromBranch Branch                @relation("ConsignFromBranch", fields: [fromBranchId], references: [id])
  shop       ConsignmentShop       @relation("ConsignToShop", fields: [shopId], references: [id])
  lines      ConsignDeliveryLine[]
}

model ConsignDeliveryLine {
  id                  Int     @id @default(autoincrement())
  docId               Int
  productId           Int?
  categoryId          Int?
  productName         String?
  partnerCategoryCode String?
  partnerCategoryName String?
  quantity            Int
  unitPrice           Float?
  totalPrice          Float?

  doc     ConsignDeliveryDoc @relation(fields: [docId], references: [id])
  product Product?           @relation(fields: [productId], references: [id])
}

model User {
  id           Int    @id @default(autoincrement())
  email        String @unique
  passwordHash String
  role         Role   @default(USER)

  name              String?
  consignmentShopId Int?
  consignmentShop   ConsignmentShop? @relation(fields: [consignmentShopId], references: [id])

  branchId Int?
  branch   Branch? @relation(fields: [branchId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
