// routes/consignmentRoutes.js
const express = require("express");
const router = express.Router();
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const authMiddleware = require("../middleware/auth");
const checkRole = require("../middleware/checkRole");

//
// üè™ Consignment Shops (‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤)
//

// üìã GET: ‡∏î‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/shops", authMiddleware, async (req, res) => {
  try {
    const shops = await prisma.consignmentShop.findMany({
      orderBy: { name: "asc" },
    });
    res.json(shops);
  } catch (error) {
    console.error("‚ùå Get consignment shops failed:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// üîé GET: ‡∏î‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
router.get("/shops/:id", authMiddleware, async (req, res) => {
  try {
    const shop = await prisma.consignmentShop.findUnique({
      where: { id: Number(req.params.id) },
    });

    if (!shop) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤" });
    res.json(shop);
  } catch (error) {
    console.error("‚ùå Get consignment shop failed:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// ‚ûï POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.post("/shops", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { name, display, contact } = req.body;

    const shop = await prisma.consignmentShop.create({
      data: { name, display, contact },
    });

    res.json(shop);
  } catch (error) {
    console.error("‚ùå Create consignment shop failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

// ‚úèÔ∏è PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.put("/shops/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { name, display, contact } = req.body;

    const shop = await prisma.consignmentShop.update({
      where: { id: Number(req.params.id) },
      data: { name, display, contact },
    });

    res.json(shop);
  } catch (error) {
    console.error("‚ùå Update consignment shop failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

// üóëÔ∏è DELETE: ‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.delete("/shops/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    await prisma.consignmentShop.delete({
      where: { id: Number(req.params.id) },
    });
    res.json({ message: "‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    console.error("‚ùå Delete consignment shop failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

//
// üì¶ Consignments (‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
//

// üìã GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", authMiddleware, async (req, res) => {
  try {
    const consignments = await prisma.consignment.findMany({
      include: {
        shop: true,
        product: true,
      },
      orderBy: { createdAt: "desc" },
    });

    res.json(consignments);
  } catch (error) {
    console.error("‚ùå Get consignments failed:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// üîé GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
router.get("/:id", authMiddleware, async (req, res) => {
  try {
    const consignment = await prisma.consignment.findUnique({
      where: { id: Number(req.params.id) },
      include: {
        shop: true,
        product: true,
      },
    });

    if (!consignment) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢" });
    res.json(consignment);
  } catch (error) {
    console.error("‚ùå Get consignment failed:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// ‚ûï POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢
router.post("/", authMiddleware, async (req, res) => {
  try {
    const { shopId, productId, price, quantity } = req.body;

    const consignment = await prisma.consignment.create({
      data: {
        shopId,
        productId,
        price,
        quantity,
        createdAt: new Date(),
      },
      include: { shop: true, product: true },
    });

    res.json(consignment);
  } catch (error) {
    console.error("‚ùå Create consignment failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

// ‚úèÔ∏è PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢
router.put("/:id", authMiddleware, async (req, res) => {
  try {
    const { price, quantity } = req.body;

    const consignment = await prisma.consignment.update({
      where: { id: Number(req.params.id) },
      data: { price, quantity },
      include: { shop: true, product: true },
    });

    res.json(consignment);
  } catch (error) {
    console.error("‚ùå Update consignment failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

// üóëÔ∏è DELETE: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    await prisma.consignment.delete({
      where: { id: Number(req.params.id) },
    });
    res.json({ message: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    console.error("‚ùå Delete consignment failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
