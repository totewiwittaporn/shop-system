const express = require("express");
const { PrismaClient } = require("@prisma/client");
const authMiddleware = require("../../middleware/auth");
const checkRole = require("../../middleware/checkRole");

const prisma = new PrismaClient();
const router = express.Router();

// ‚úÖ GET: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
router.get("/", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const products = await prisma.branchProduct.findMany({
      include: { branch: true, product: true },
      orderBy: { id: "asc" },
    });
    res.json(products);
  } catch (err) {
    console.error("‚ùå Get branch products failed:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// ‚ûï POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤
router.post("/", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { branchId, productId, sku, name, price, stock } = req.body;
    const branchProduct = await prisma.branchProduct.create({
      data: { branchId, productId, sku, name, price, stock },
    });
    res.json(branchProduct);
  } catch (err) {
    console.error("‚ùå Create branch product failed:", err.message);
    res.status(400).json({ error: err.message });
  }
});

// ‚úèÔ∏è PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤
router.put("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;
    const { sku, name, price, stock } = req.body;
    const branchProduct = await prisma.branchProduct.update({
      where: { id: Number(id) },
      data: { sku, name, price, stock },
    });
    res.json(branchProduct);
  } catch (err) {
    console.error("‚ùå Update branch product failed:", err.message);
    res.status(400).json({ error: err.message });
  }
});

// üóëÔ∏è DELETE: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤
router.delete("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.branchProduct.delete({ where: { id: Number(id) } });
    res.json({ message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    console.error("‚ùå Delete branch product failed:", err.message);
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;
