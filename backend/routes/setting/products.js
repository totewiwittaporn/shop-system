// routes/setting/products.js
const express = require("express");
const { PrismaClient } = require("@prisma/client");
const authMiddleware = require("../../middleware/auth");
const checkRole = require("../../middleware/checkRole");

const prisma = new PrismaClient();
const router = express.Router();

/**
 * üìã RULES
 * - Admin: ‡∏î‡∏π/‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ
 * - Staff / Customer: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô settings
 */

// üìã GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const products = await prisma.product.findMany({
      include: {
        category: true,
        branchProducts: true,
      },
      orderBy: { id: "asc" },
    });
    res.json(products);
  } catch (err) {
    console.error("‚ùå Get products failed:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// üîé GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
router.get("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;
    const product = await prisma.product.findUnique({
      where: { id: Number(id) },
      include: {
        category: true,
        branchProducts: true,
      },
    });

    if (!product) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    res.json(product);
  } catch (err) {
    console.error("‚ùå Get product failed:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// ‚ûï POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
router.post("/", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { name, description, categoryId, barcode } = req.body;

    const product = await prisma.product.create({
      data: {
        name,
        description,
        categoryId,
        barcode,
      },
    });

    res.json(product);
  } catch (err) {
    console.error("‚ùå Create product failed:", err.message);
    res.status(400).json({ error: err.message });
  }
});

// ‚úèÔ∏è PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
router.put("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, categoryId, barcode } = req.body;

    const product = await prisma.product.update({
      where: { id: Number(id) },
      data: {
        name,
        description,
        categoryId,
        barcode,
      },
    });

    res.json(product);
  } catch (err) {
    console.error("‚ùå Update product failed:", err.message);
    res.status(400).json({ error: err.message });
  }
});

// üóëÔ∏è DELETE: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
router.delete("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;

    await prisma.product.delete({
      where: { id: Number(id) },
    });

    res.json({ message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    console.error("‚ùå Delete product failed:", err.message);
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;
