// routes/branchRoutes.js
const express = require("express");
const router = express.Router();
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const authMiddleware = require("../middleware/auth");
const checkRole = require("../middleware/checkRole");

// üìã GET: ‡∏î‡∏∂‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° users)
router.get("/", authMiddleware, async (req, res) => {
  try {
    const branches = await prisma.branch.findMany({
      include: { users: true },
      orderBy: { name: "asc" },
    });
    res.json(branches);
  } catch (error) {
    console.error("‚ùå Get branches failed:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// GET all branches
router.get("/", async (req, res) => {
  try {
    const branches = await prisma.branch.findMany({
      select: { id: true, name: true }
    });
    res.json(branches);
  } catch (err) {
    console.error("Get branches failed:", err);
    res.status(500).json({ error: "Failed to fetch branches" });
  }
});

// üìã GET: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown (‡πÄ‡∏ö‡∏≤‡∏Å‡∏ß‡πà‡∏≤, ‡πÑ‡∏°‡πà‡∏°‡∏µ users)
router.get("/dropdown", authMiddleware, async (req, res) => {
  try {
    const branches = await prisma.branch.findMany({
      select: { id: true, name: true },
      orderBy: { name: "asc" },
    });
    res.json(branches);
  } catch (error) {
    console.error("‚ùå Get branch dropdown failed:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// ‚ûï POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏´‡∏°‡πà (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.post("/", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { name, address, phone } = req.body;
    const branch = await prisma.branch.create({
      data: { name, address, phone },
    });
    res.json(branch);
  } catch (error) {
    console.error("‚ùå Create branch failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

// ‚úèÔ∏è PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.put("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    const { name, address, phone } = req.body;
    const branch = await prisma.branch.update({
      where: { id: Number(req.params.id) },
      data: { name, address, phone },
    });
    res.json(branch);
  } catch (error) {
    console.error("‚ùå Update branch failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

// üóëÔ∏è DELETE: ‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.delete("/:id", authMiddleware, checkRole(["admin"]), async (req, res) => {
  try {
    await prisma.branch.delete({ where: { id: Number(req.params.id) } });
    res.json({ message: "‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    console.error("‚ùå Delete branch failed:", error.message);
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
